/**
 * Your description here
 * @author ENTER YOUR NAME HERE
 * @version ENTER DATE HERE
 *
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class WordGuessing {

    /**
     * Takes a filename as input. Reads a list of words from the file into a
     * list and returns the list. Ensures that all of the words in the list are
     * in UPPERCASE (i.e. transforms lowercase letters to uppercase before
     * adding them to the list). Assumes that the file will be correctly
     * formatted with one word per line (though there may be blank lines with
     * no words on them). If the file cannot be read prints the
     * error message "ERROR: File fname not found!" where "fname" is the name of
     * the file and returns an empty list.  Note that the order of the words in the
     * list must be the same as the order of the words in the file to pass the
     * test cases.
     *
     * @param fname
     *            the name of the file to read words from
     * @return a list of words read from the file in all uppercase letters.
     */
    public static List<String> readWords(String fname) {
        List<String> words = new ArrayList<String>();
        try {
        	File readFile = new File(fname);
        	Scanner textScanner = new Scanner (readFile);
        	while (textScanner.hasNext()) {
        		String str = textScanner.nextLine(); // read in line
        		if (str.length() > 0) {// deal with blank space.
        		words.add(str.toUpperCase());
        		}// add uppercase into ArrayList
        	}
        	textScanner.close();
        }
        catch (FileNotFoundException e) { // error message when file not found
        	System.out.println ("ERROR: File " + fname + " not found!");
        	System.out.println ("Goodbye!");
        }
        
        return words;
    }

    /**
     * Takes a Random object and a list of strings and returns a random String
     * from the list. Note that this method must not change the list.  The list
     * is guaranteed to have one or more elements in it.
     *
     * @param rnd
     *            Random number generator object
     * @param inList
     *            list of strings to choose from
     * @return an element from a random position in the list
     */
    public static String getRandomWord(Random rnd, List<String> inList) {
        
        return inList.get(rnd.nextInt(inList.size())); // get random word within range of inList. because the range will be less than size so it should not be out of bound.
    }

    /**
     * Given a String, returns a StringBuilder object that is the same length
     * but is only '*' characters. For example, given the String DOG as input
     * returns a StringBuilder object containing "***".
     *
     * @param inWord
     *            The String to be starred
     * @return a StringBuilder with the same length as inWord, but all stars
     */
    public static StringBuilder starWord(String inWord) {
        StringBuilder sb = new StringBuilder ();
        for (int i =0; i < inWord.length(); i++) {
        	sb.append('*');
        }

        return sb;
    }

    /**
     * Prompts the user to enter a single character. If the user enters a blank
     * line or more than one character, give an error message as given in the
     * assignment and prompt them again. When the user enters a single
     * character, return the uppercase value of the character they typed.
     *
     * @param inScanner
     *            A scanner to take user input from
     * @return the uppercase value of the character typed by the user.
     */
    public static char getCharacterGuess(Scanner inScanner) {
        System.out.print ("Enter a character to guess: ");
        String input = inScanner.nextLine();
        while (input.length() != 1) {
        	System.out.println ("Enter only a single character!");
        	System.out.print ("Enter a character to guess: ");
            input = inScanner.nextLine();
        }
        
        return input.toUpperCase().charAt(0);
    }

    /**
     * Count the number of times the character ch appears in the String word.
     *
     * @param ch
     *            character to count.
     * @param word
     *            String to examine for the character ch.
     * @return a count of the number of times the character ch appears in the
     *         String word
     */
    public static int charCount(char ch, String word) {
        int count = 0;

        for (int i = 0; i < word.length(); i++) {
        	if (ch == word.charAt(i)) {
        		count++;
        	}
        }
        return count;
    }

    /**
     * Modify the StringBuilder object starWord everywhere the char ch appears
     * in the String word. For example, if ch is 'G', word is "GEOLOGY", and
     * starWord is "**O*O*Y", then this method modifies starWord to be
     * "G*O*OGY".  Your code should assume that word and starWord are
     * the same length.
     *
     * @param ch
     *            the character to look for in word.
     * @param word
     *            the String containing the full word.
     * @param starWord
     *            the StringBuilder containing the full word masked by stars.
     */
    public static void modifyStarWord(char ch, String word,
            StringBuilder starWord) {
        for (int i =0; i <word.length(); i++) {
        	if (ch == word.charAt(i)) {
        		starWord.setCharAt(i,ch);
        	}
        }
        System.out.println ("The word to guess is: " + starWord);

    }
    
    /**
     * After the user correctly guesses a word, ask him whether he want to continue to play or not.
     * Only accept y or n in both uppercase and lowercase. Return the uppercase of the user's choice
     * @param in
     *            the Scanner to take in the input of the user
     */  
    
    
    public static char getChoice(Scanner in) {
        System.out.print("Would you like a rematch [Y/N]?: ");	
        String input = in.nextLine();
    	while ((input.length() != 1 ||
    			Character.toUpperCase(input.charAt(0))!= 'Y') ) {// loop until condition is reached
    		
    			System.out.println("Please enter only a Y or an N.");
    			System.out.print("Would you like a rematch [Y/N]?: ");
    			input = in.nextLine();
    	}
    	char UpperChoice = Character.toUpperCase(input.charAt(0));
    	return UpperChoice;
        }
    
    
    
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        Random rnd = new Random();
        System.out.print("Enter a random seed: ");
        int seed = Integer.parseInt(in.nextLine());
        rnd.setSeed(seed);
        // ask for filename and print out how many words read from the file
        System.out.print("Enter a filename for your wordlist: ");
        String inFile = in.nextLine();
        // read from file
        List <String> arr = readWords(inFile);
        System.out.println ("Read "+  arr.size() + " words from the file.");
        System.out.println();
        // loop from here when restart
        char playChoice = 'a';
        while (playChoice != 'N'){
			// get a random word to start the game
			String word = getRandomWord(rnd, arr);
			// Print out the word to guess in stars
			StringBuilder sb = starWord(word);
			System.out.println("The word to guess is: " + sb);

			// create an arraylist to hold the guess
			ArrayList<Character> previousGuess = new ArrayList<>();

			// print out the previous guess character
			System.out.println("Previous characters guessed: " + Arrays.toString(previousGuess.toArray()));
			// ask for guess and add the character into the previous guess array
			char ch = getCharacterGuess(in);

			// if it is not, add. Otherwise, prompt. return arraylist
			previousGuess.add(ch);
			// call char count
			int count = charCount(ch, word);
			System.out.println("The character " + ch + " occurs in " + count + " positions.");
			System.out.println();

			// call modify star
			modifyStarWord(ch, word, sb);
			// ask for guess of full word
			System.out.print("Enter your guess for the word: ");
			String fullGuess = in.nextLine();

			int numOfGuess = 1; // set up number of guess. start from 1 because of the last one
			while (!fullGuess.toUpperCase().equals(word.toUpperCase())) {
				System.out.println("That is not the word.");
				System.out.println();
				modifyStarWord(ch, word, sb);
				System.out.println("Previous characters guessed: " + Arrays.toString(previousGuess.toArray()));
				ch = getCharacterGuess(in);
				previousGuess.add(ch);
				count = charCount(ch, word);
				System.out.println("The character " + ch + " occurs in " + count + " positions.");
				System.out.println();
				modifyStarWord(ch, word, sb);
				System.out.print("Enter your guess for the word: ");
				fullGuess = in.nextLine();
				numOfGuess++;
			}
			System.out.println("Yes! " + word.toUpperCase() + " is the correct word!");
			System.out.println("That took you " + numOfGuess + " guesses.");
			playChoice = getChoice(in);
			System.out.println();
		}
		System.out.println("Goodbye!");
    }
    	
}